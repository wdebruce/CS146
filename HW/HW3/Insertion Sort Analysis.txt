Homework 3

Analyze time complexity for Insertion-Sort
Insertion-Sort(A, n) pseudocode:
for i = 1 to n
        key = A[i]
        //Insert A[i] into the sorted subarray A[1:i-1]
        j = i-1
        while j >= 0 and A[j] > key
               A[j + 1] = A[j]
               j = j - 1
        A[j + 1] = key

Best case scenario: O(n)
        Explanation: array is sorted so each index is visited once, so the
        Insertion Sort runs O(n).
Worst case scenario: O(n^2)
        Explanation: array is sorted in the total opposite order, so each and every 
        character must be sorted. Each iteration of the for loop includes i swaps and there
        should be n iterations of the for loop. Then we can say that the worst case, could be
        the sum of each of the i steps (1 + 2 + 3 + ... + n) which we know is sum of finite
        sequence of numbers. = n(n+1)/2
        so O(n(n+1)/2) = O((n^2+n)/2) = highest power = O(n^2)
Average case scenario: O(n^2)
        Explanation: this should be in between O(n) and O(n^2), the average of both
        gives O((n+n^2)/2) which would simply yield the highest power of O(n^2)