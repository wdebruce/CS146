Homework 3

Analyze time complexity for Insertion-Sort
Insertion-Sort(A, n) pseudocode:
for i = 1 to n
        key = A[i]
        //Insert A[i] into the sorted subarray A[1:i-1]
        j = i-1
        while j >= 0 and A[j] > key
               A[j + 1] = A[j]
               j = j - 1
        A[j + 1] = key

Explanation:
Time complexity for Insertion-Sort should be O(n^2). 
My initial reasoning for this is that there is a while loop nested inside a for loop,
which usually gives O(n^2). However, the while loop may not always be executed n times during each iteration of the for loop.
But I think of the worst case which the array is arranged totally backwards of the sorting, so the while loop will be
running i times during the ith iteration, which there will be n of these. so we in the worst case we could say
a sequence of 1 + 2 + 3 + 4 + ... + n which is the sum of finite sequence which is equal to n(n+1)/2
so I can say the time complexity is O(n(n+1)/2) which can be rewritten as O((n^2+1)/2).
As n^2 is the highest power, we can just simplify the complexity to O(n^2).
